Version 1.1
Software Engineering Project
Requirements Analysis and Specifications Document

Vianney Payelle - Rémi Rigal - Noëlie Ramuzat



Revision Notice

Table 1 : RASD versions


Table of Contents

Revision Notice	1
List of tables	4
List of figures	4
1.	Introduction	5
1.1.	Purpose	5
1.2.	Scope	5
1.3.	Glossary	5
1.4.	Reference Documents	5
1.5.	Used Tools	5
1.6.	Overview	5
2.	Stakeholders specification	6
2.1.	Stakeholders	6
2.2.	Goals and Objectives	6
2.3.	Scenarios identifying	6
2.3.1.	First Scenario	6
2.3.2.	Second Scenario	6
2.3.3.	Third Scenario	6
2.3.4.	Fourth Scenario	6
3.	Overall Description	7
3.1.	Product perspective (external interfaces)	7
3.2.	Product functions (Goals)	7
3.3.	User characteristics (actors)	7
3.4.	Constraints	7
3.5.	Assumptions and Dependencies (Domain)	7
4.	Specific Requirements	8
4.1.	External Interface Requirements	8
4.1.1.	User Interfaces	8
4.1.2.	Hardware Interfaces	8
4.1.3.	Software Interfaces	8
4.1.4.	Communication Interfaces	8
4.2.	Functional requirements	8
4.2.1.	Use cases diagram	8
4.2.2.	Use case 1	8
4.2.3.	Use case 2	8
4.3.	Non-functional requirements	8
4.3.1.	Architectural consideration	8
4.4.	Design Constraints	8
4.4.1.	Standards compliance	8
4.4.2.	Hardware limitations	8
4.5.	Software System Attributes	8
4.5.1.	Reliability	8
4.5.2.	Availability	8
4.5.3.	Security	8
4.5.4.	Maintainability	8
4.5.5.	Portability	8
4.6. Other Requirements	9
5.	UML models	10
5.1.	Class diagram	10
5.2.	Sequence diagrams	10
5.3.	Activity diagrams	10
5.4.	State diagrams	10
6.	Alloy modelling	11
6.1.	Model	11
6.2.	Alloy result	11
6.3.	World generated	11
7.	Future development	12
8.	Hours of work	13
A.	Vianney Payelle	13
B.	Rémi Rigal	13
C.	Noëlie Ramuzat	13
Appendices	14
Index	15


List of tables 

Table 1 : RASD versions	1
Table 2 : Reference Documents used in the RASD	6
Table 3 : Description of the tools used to create the RASD	6

List of figures

1.	Introduction
1.1.	Purpose
1.2.	Scope
1.3.	Glossary
1.4.	Reference Documents

Table 2 : Reference Documents used in the RASD
1.5.	Used Tools

Table 3 : Description of the tools used to create the RASD



1.6.	Overview


2.	Stakeholders specification
2.1.	Stakeholders
2.2.	Goals and Objectives
2.3.	Scenarios identifying
2.3.1.	First Scenario
	-	John registers the CARS app on his mobile, by giving his name and his payment information and he received his password on his mobile.
	-	He logs in the app, selects the research mode of the app, and gives 1.5km as the maximal distance from his position he wants to find a car. 
	-	The app provides him a map with the station around him according to the distance, with the indication of the available cars.
	-	He selects a ZOE in the nearest station. Then he ticks the money saving option and put his destination, the Duomo. 
	-	He validates at 2pm, the app registers the reservation and locks the car for John until 3pm.
	-	At 2.30pm John stops near the car and selects the unlock mode of the app. The car is unlocked (detects John with Bluetooth). He gets in the car and sees on the screen the price of the ride: 0€, and the amount of money/min: 0.8€.
	-	He drives and takes Claire and Marie on the road, the system detects them and the price on the screen is reduced by 10%.
	-	On his mobile, the app indicates him the nearest station from his destination where he can have a discount (because of the saving money option). Reaching the station after 1h, John parks the car and plugs it. The battery is 40% empty. The price is reduced by 60% (10%+30%+20%) on the screen. 
	-	John, Clare and Marie leave the car, the system detects that the car is empty & close & park in a safe area with the GPS. It stops charging the price, locks ZOE & registers it as available at the new station on the app.
	-	John receives a message with the amount of money he will pay: 19.2€.

2.3.2.	Second Scenario
	-	Katia is already registered on the CARS app. She uses the research mode to find a car near her flat to go to the cinema; she enters her address on the app. 
	-	She enters 700m as the maximal distance from her flat where she wants to find a car. 
	-	The app provides her a map with the station around him according to the distance, with the indication of the available cars.
	-	She selects a ZOE in the tram station and she validates at 4pm.
	-	The app registers the reservation and locks the car for Katia until 5pm.
	-	But finally Katia invites Karl to the cinema and he drives them. So Katia was not at the station one hour after one hour. The system registers ZOE as available again at the station.
	-	Katia receives a message with the amount of money she has to pay: 1€.

2.3.3.	Third Scenario
	-	Steve is already registered on the CARS app. He selects the research mode of the app, and enters 1km as the maximal distance from his position he wants to find a car. 
	-	The app provides him a map with the station around him according to the distance, with the indication of the available cars.
	-	He selects a Bluecar in the 3rd station and and validates at 5p.m.
	-	The app registers the reservation and locks the car for Steve until 6pm.
	-	At 5.40pm, Steve walks to the station, stops near the car and selects the unlock mode of the app. The car is unlocked. He gets in the car and sees on the screen the price of the ride: 0€, and the amount of money/min: 0.7€.
	-	He drives 1h until reach his grandparent’s small town. There is only one safe station given by the app, without power grid, the nearest is at 5km from the station. He parks there, the battery is 81% empty. The price is augmented by 60% (30%+30%) on the screen. 
	-	He leaves the car, the system detects that the car is empty & close & park in a safe area with the GPS. It stops charging the price, locks the Bluecar & registers it as available at the new station.
	-	Steve receives a message with the amount of money he will pay: 67.2€.
	
2.3.4.	Fourth Scenario
	- Amelie selected a car.
	- Then she cancelled it before the end of the hour
	- The car is available again immediately (quickly)
	- She received a sms confirming it, she pays nothing but the app informes her that she cannot select a car again in the next 3h.
	
3.	Overall Description 

3.1.	Product perspective (external interfaces)
3.2.	Product functions 
3.3.	User characteristics (actors)
3.4.	Constraints
3.5.	Assumptions and Dependencies (Domain)


4.	Specific Requirements
4.1.	External Interface Requirements
4.1.1.	User Interfaces
4.1.2.	Hardware Interfaces
4.1.3.	Software Interfaces
4.1.4.	Communication Interfaces

4.2.	Functional requirements
4.2.1.	Use cases diagram
4.2.2.	Use case 1
	Use cases name: CarHiring, AppRegistration, CarUnloking, CancelHiring, EndRide, Ride.
	Participating actors:
	-	Hirer (Steve, Katia, Amelie and John in the Scenarios)
	Entry condition: ? 
	Flow of Events: 
	-	Same as scenario 1
	-	Termination condition: The Hirer received the bell of the ride.
	Exit condition: ?
	Exceptions:
	-	If the connection is lost the app page is reloaded and the Hirer has to fill it again.
	-	If the Hirer is not detected at the station one hour after the reservation then the system registers the reserved car as available again at the station.
	Special Requirements:
	 The price of the ride must be adapted in function of the battery levels/ discounts/power grid distance.
	 

4.2.2.1.	Functional requirement 1.1
4.2.3.	Use case 2
4.2.3.1.	Functional requirement 2.1

4.3.	Non-functional requirements
4.3.1.	Architectural consideration

4.4.	Design Constraints
4.4.1.	Standards compliance 
4.4.2.	Hardware limitations

4.5.	Software System Attributes
4.5.1.	Reliability 
4.5.2.	Availability 
4.5.3.	Security 
4.5.4.	Maintainability 
4.5.5.	Portability

4.6. Other Requirements

5.	UML models

5.1.	Class diagram 
5.2.	Sequence diagrams
5.3.	Activity diagrams
5.4.	State diagrams

6.	Alloy modelling

6.1.	Model
6.2.	Alloy result
6.3.	World generated

7.	Future development

8.	Hours of work
8.1.	Vianney Payelle
8.2.	Rémi Rigal
8.3.	Noëlie Ramuzat

Appendices

Index

