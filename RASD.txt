Version 1.1
Software Engineering Project
Requirements Analysis and Specifications Document

Vianney Payelle - Rémi Rigal - Noëlie Ramuzat


1.	Introduction
1.1.	Purpose (goals)
Goals:

G1: Allow user to register to the system  by providing credential and payment informations

G2: Allow user to log into the system with provided password

G3: User can locate available cars within a certain distance around him or an address

G4: User can book a car for up to 1hour before pick it up

G5: A booked car but not picked up within one hour generate 1€ fee for the user

G6: A user close enough to a car booked by him must be able to open it

G7: The system start charging once engine ignite

G8: The system stop charging once he leave the car parked in a safe area

G9: The set of safe area is predefined by the management system

G10: Passenger discount

G11: Low consumption discount (<50%)

G12 : Plugged car in special parking area discount

G13: On site recharge fee (<20% battery left or more than 3km from station)

G14: Money saving option: distribution algorithm with user preferences to define a station where the user must leave the car % based on 100% charged battery

1.2.	Scope (world, share phenomena)
1.3.	Definitions, acronyms, and abbreviations [Vianney]
User
Car

Application (Input and output for user)
Management system (Global management for car and users)

Safe area
Special parking area

Car status
1.4.	Reference Documents
1.5.	Used Tools
1.6.	Overview

2.	Overall Description 
2.1.	Product perspective (external interfaces)
2.1.1.	Class diagram [Noëlie]
2.1.2.	State diagrams [Noëlie]
2.2.	Product functions  (requirements) [Vianney]
G1: Allow user to register to the system  by providing credential and payment informations
	-Store provided informations
	-Link payment credential to payment system
	-Ensure confidentiality and security
	-Return password to log into the system
	-Check already existing user

G2: Allow user to log into the system with provided password
	-Check credential 
	-Allow access if the informations are right
	
G3: User can locate available cars within a certain distance around him or an address
	-User can input address and/or range
	-The management system know if a car is available or not
	-The management system can compare cars locations with the provided address or the user’s 	locations
	-The application can show those cars and their locations


G4: User can book a car for up to 1 hour before pick it up
	-User cannot book the car for more than one later than the current time.
	-User must pick a car among the available ones
	-The system must change the status of the car from available to unavailable

G5: A booked car but not picked up within one hour generate 1€ fee for the user
	-The system charge the user who booked the car for 1€
	-The system change the status of the car from unavailable to available

2.3.	User characteristics (actors) [Vianney]
2.4.	Constraints [Vianney]
2.5.	Assumptions and Dependencies (Domain) [Vianney]
- We assume that the amount of safe areas is enough to cover efficiently the entire city in which the system evolves

3.	Specific Requirements
3.1.	External Interface Requirements
3.1.1.	User Interfaces [Rémi]
3.1.2.	Hardware Interfaces
3.1.3.	Software Interfaces
3.1.4.	Communication Interfaces
	
3.2.	Functional requirements
3.2.1.	Scenarios identifying [Noëlie]
3.2.1.1. Scenarios Diagram [Rémi]
3.2.1.2.	First Scenario
	-	John wants to visits the Duomo with Claire and Marie. He has heard about the PowerEnjoy app by a friend, so he wants to try and downloads it on his mobile.
	-   He registers on the app, giving his name, his email, his payment information, his driver license and a copy of his identity card. 
	- 	He receives a confirmation of his registration and his user password by email.
	-	He logs in the app, selects the reservation mode and chooses 1.5km as maximal distance from his position where he wants to find a car. 
	-	PowerEnjoy provides him a map with the stations around him, according to the distance, with the indication of the available cars.
	-	He selects a car in the nearest station, at 500m from him. 
	-	He validates at 2pm. He receives an email, confirming that the car is locked for John until 3pm.
	-	At 2.05pm John walks to the car and selects the unlock mode of the app, then the car unlockes. 
	-	He gets in the car and sees on the navigation screen the price of the ride: 0€, the actual discount: 0€ and the amount of money/min: 0.8€.
	-	Then he ticks the money saving option and put his destination. On the car interface, the app indicates him the nearest station from the Duomo where he can have a discount.
	-	He drives and takes Claire and Marie on the road, the system detects them and the screen prints a discount of 10%.
	-	Reaching the station after 20 minutes, John parks the car and plugs it. The battery is 40% empty. The price is 16€ and the discount 60% on the screen. 
	-	John, Claire and Marie leave the car, the car locks and is available again.
	-	John receives an email with the amount of money he will pay, 7€ and the discount he has : 60%.

3.2.1.3.	Second Scenario
	-	Katia is already registered on the PowerEnjoy app. She uses the reservation mode to find a car near her flat to go to the cinema; she enters her address on the app. 
	-	She enters 700m as the maximal distance from her flat where she wants to find a car. 
	-	PowerEnjoy provides her a map with the stations around her according to the distance, with the indication of the available cars.
	-	She selects a car in the tram station and she validates at 4p.m. 
	-	She receives an email, confirming that the car is locked for her until 5pm.
	-	But finally Katia invites Karl to the cinema and he drives them. So Katia was not at the station after 6p.m. At this moment the car is available again at the station.
	-	Katia receives an email with the amount of money she has to pay: 1€, the app informs her that she cannot select a car again in the next 3h.

3.2.1.4.	Third Scenario
	-	Steve selects the reservation mode of the app and enters 1km as maximal distance to find a car. 
	-	The app provides him a map with the station around him according to the distance, with the indication of the available cars.
	-	He selects a car with 50% of battery empty in the 3rd station and and validates at 5p.m. 
	-	He receives an email, confirming that the car is locked for him until 6pm.
	-	At 5.40pm, Steve walks to the station, stops near the car and selects the unlock mode of the app. The car is unlocked. 
	-	He gets in the car and sees on the screen the price of the ride: 0€, the actual discount: 0€ and the amount of money/min: 0.7€.
	-	He drives 1h until reach his grandparent’s small town. There is only one safe station given by the app, without power grid, the nearest is at 4km from the station. 
	- 	He parks there, the battery is 81% empty. The screen prints a charge of 60%.
	-	He leaves the car, which locks and is available again.
	-	Steve receives a message with the amount of money he will pay: 67€ and the charge he has on his last ride : 60%.
	
3.2.1.5.	Fourth Scenario
	- 	Amelie selects the reservation mode of the app, and enters 2km as the maximal distance from her she wants to find a car. 
	-	The app provides her a map with the station around her, according to the distance, with the indication of the available cars.
	-	She selects a car in the nearest parking and validates at 7p.m. 
	-	She receives an email, confirming that the car is locked for her until 8p.m.
	-	But her mother decides at the last moment to come at her house. 
	- 	So Amelie cancels her booking on the app at 7.30p.m.
	- 	She received an email confirming it, she pays 1€ and the app informs her that she cannot select a car again in the next 2h.
	- 	The car is available again immediately on the app.
	
3.2.1.5.	Fifth Scenario
	- 	Anna is already registered on the PowerEnjoy app. She selects the reservation mode of the app, and enters 1km as the maximal distance from her position she wants to find a car. 
	-	The app provides her a map with the station around her, according to the distance, with the indication of the available cars.
	-	She selects a car in the nearest parking and validates at 6a.m. 
	-	She receives an email, confirming that the car is locked for her until 7a.m. 
	-	Then her sister wants to take a car too, she is used to take the account of Anna on PowerEnjoy. She tried to use the reservation mode on her phone but she can't select it.
	- 	She can only access to the cancel mode.  
	- 	She asks to Anna if she reserved a car, and if she can drives her to the school. Anna agrees and they live their house.

3.2.1.6. Sixth Scenario
	-	Simone has reserved a car with the PowerEnjoy app. He has picked it in time and drived until his girlfriend's house. The price on the screen is 22€. 
	-	There is no safe area around the house and Simone decides to parks in the street.
	- 	He leaves the car, which locks and is available again.
	-	Simone receives a message with the amount of money he will pay: 44€.

3.2.2.	Use cases diagram [Rémi]
[Noëlie]
3.2.3.	Use cases
Use case 1
Use case name: AppRegistration
	Participating actors:
	-	Driver
	Entry condition: 
	-	The Driver selects the "Registration" function of the PowerEnjoy app
	Flow of Events: 
	-	The Driver fills in the registration form : The Driver gives his name, his email, his payment information, his driver license and an identity document.
	- 	The Driver submits his informations.
	- 	The System checks if the email is not in the database. Then it creates a new Driver in the database, with the informations given and a new password.
	-	The System sends a registration confirmation to the Driver, with his password, by email.
	Exit condition: 
	-	The Driver received his password by email.
	Exceptions:
	-	If the connection is lost, the app page is reloaded and the Driver has to fill it again
	-	If the email is already in the database, the app page is reloaded with an error message 
	Special Requirements: ?
	 
Functional requirement 1.1

Use case 2
Use cases name: DriverLogIn
	Participating actors:
	-	Driver
	Entry condition: 
	-	The Driver selects the "Login" function of the app
	Flow of Events: 
	-	The Driver fills in the email and password entries and submits.
	-	The System checks the email and password in the database and logs the Driver.
	Exit condition: 
	-	The Driver logs in the app.
	Exceptions:
	-	If the connection is lost the app page is reloaded and the Driver has to fill it again.
	-	If the email is not in the database, the app page is reloaded with an error message.
	- 	If the password does not correspond to the email in the database, the app page is reloaded with an error message.
	- 	If the Driver selects the "forget password" function, the Driver has to fill in the email entries and submits. 
		The System checks the email in the database and sends the associated password by email to the Driver or prints an error.
	Special Requirements: ?
	 
Functional requirement 2.1

Use case 3
Use cases name: CarReservation
	Participating actors:
	-	Driver
	Entry condition: The Driver logs in and selects the "Reserve car" function of the app
	Flow of Events: 
	-	The Driver enters his location, by giving an adress or selecting his GPS position.
	- 	The Driver chooses a maximal distance from the selected location to find a car. 
	-	The System finds the station around the location, according to the distance and the available cars. It sends them on a map to the Driver's mobile.
	-	The Driver selects a car in a proposed station and validates the reservation.
	-	The System registers the reservation in the database, by locking the car for the Driver during 1hour : the car is unavailable on the PowerEnjoy app during 1hour.
	-	The System sends an email of confirmation to the Driver.
	Termination condition: 
	-	The Driver received the reservation confirmation by email.
	Exceptions:
	-	If the connection is lost the app page is reloaded and the Driver has to fill it again.	
	-	If the Driver had already reserved a car or is forbidden to reserve one,  the "Reserve car" function is not available.
	Special Requirements: ?	
	
Functional requirement 3.1
	 
Use case 4
Use cases name:  CancelReservation
	Participating actors:
	-	Driver
	Entry condition: The Driver logs in and selects the "Cancel Resevation" function of the app before the end of the reservation.
	Flow of Events: 
	-	The System puts the car as available in the database and sends an email confirming the cancel & giving the bell of the Driver reservation: 1€. 
	-	The Driver is notified by the System that it is impossible for him to select a car again in the next 2h.
	- 	The System registers the Driver as forbidden to reserve a car for the next 2hours in the database.
	Exit condition: 
	-	The Driver received the cancel confirmation by email and the notification.
	Exceptions:
	-	If the connection is lost the app page is reloaded and the Driver has to fill it again.
	Special Requirements: ?

Functional requirement 4.1
	 
Use case 5
Use case name:  CarUnloking
Participating actors:
	-	Driver
	Entry condition: The Driver arrives near the car, logs the app and selects the "Unlock car" function 
	Flow of Events: 
	-	The System accesses to the location of the Driver by using the GPS of his mobile. 
	-	The System compares this location with the car's one and unlock it.
	-	The Driver gets in the car and sees on the navigation screen the price of the ride, the amount of money/min and the discount or charge of the ride.
	Exit condition: 
	-	The Driver start the car.
	Exceptions:
	-	If the connection is lost the app page is reloaded and the Driver has to fill it again.
	- 	If the Driver is too far from the car, The System doesn't unlock the car and sends an error message to the Driver.
	-	If the Driver is not detected at the station one hour after the reservation or is detected after this time, then the System registers the car as available again in the database with its new informations.
		The System sends an email giving the bell of the Driver reservation: 1€, and notified him that he can't select a car again in the next 3h.
		The System registers the Driver as forbidden to reserve a car for the next 3hours in the database.
	Special Requirements: ?

Functional requirement 5.1

Use case 6
Use cases name:  RideAndCarLock
	Participating actors:
	-	Driver
	-	Maintenance
	Entry condition: The Driver start the car.
	Flow of Events: 
	-	The System starts the charging of the money on the navigation screen.
	-	The Driver takes a ride until the destination.
	-	The Driver parks in a safe area given by the navigation screen, stops and exits the car.
	- 	The System is notified that the car is empty and parked in a safe area with the GPS of the car. It stops charging the price, locks the car and registers it as available at the new station in database with its new informations.
	-	The System sends an email to the Driver with the price of the ride and the discount or charge he will have on his last ride.
	Exit condition: 
	-	The Driver received the bell of the ride.
	Exceptions:
	-	If the Driver doesn't park in a safe area, the System stops charging the price, locks the car and sends an email to the Maintenance with the location of the car. Then it doubles theprice of the Driver's ride.
	-	If the Driver selects the saving money option on the car's navigation screen and gives his destination, then the System provides him, on the screen, a safe area where he can have a discount.
	-	If the car detects more than 2 passengers, it informs the System which increases the discount of the last ride by 10% on the navigation screen & in the database.
	-	If the battery level is > 50%, the car informs the System which increases the discount of the last ride by 20% on the navigation screen & in the database.
	- 	If the Driver plugs the car on a power grid within 5minutes after leaving the car, the System is notified and increases the discount of the last ride by 30% on the navigation screen & in the database.
	-	If the battery level is < 80%, the car informs the System which increases the charge of the last ride by 30% on the navigation screen & in the database.
	-	If the Driver parks further than 3km from the nearest power grid station the System detects it and increases the charge of the last ride by 30% on the navigation screen & in the database.
	Special Requirements:
	-	The System has to know how cominicate with the Maintenance.
	- 	The price of the ride must be adapted to the amount of money/min. 
	-	The discount or charge must be adapted to the battery levels/power grid distance/number of passengers.

Functional requirement 6.1

3.2.4.	Sequence diagrams [Noëlie]
3.2.5.	Activity diagrams [Noëlie]


3.3.	Non-functional requirements [Rémi]
3.3.1.	Architectural consideration [Rémi]

3.4.	Design Constraints
3.4.1.	Standards compliance 
3.4.2.	Hardware limitations

3.5.	Software System Attributes
3.5.1.	Reliability 
3.5.2.	Availability 
3.5.3.	Security 
3.5.4.	Maintainability 
3.5.5.	Portability

3.6. Other Requirements

4.	Alloy modelling
4.1.	Model
4.2.	Alloy result
4.3.	World generated

5.	Future development

6.	Hours of work
6.1.	Vianney Payelle
6.2.	Rémi Rigal
6.3.	Noëlie Ramuzat

Appendices

Index

