3. Classes assigned to the group:
The class assigned to our group is the PdfSurveyServices that permits to build questions and answers for a survey from Pdf documents and to create a final Pdf with the responses.
There is no namespace in our class.

4. Functional role of assigned set of classes: <elaborate on the functional role you have identified for the class cluster that was assigned
to you, also, elaborate on how you managed to understand this roleand provide the necessary evidence, e.g., javadoc, diagrams, etc.>

5. List of issues found by applying the checklist: <report the classes/code fragments that do not fulfill some points in the check list.
Explain which point is not fulfilled and why.>


5.1 Naming Conventions
1. All class names, interface names, method names, class variables, method variables, and constants used should have meaningful names and do what the name suggests.
In the setAcroFieldsFormSurveyResponse method, line 546-548 :
The variable name "ctx" may not be clear enough to explain what it represents (the valid context needed to set the acrobat fields for the pdf and then run it).

2. If one-character variables are used, they are used only for temporary\throwaway" variables, such as those used in for loops.
In the buildSurveyResponseFromPdf, getAcroFieldsFromPdf and setAcroFields methods, respectively line 251, 302 and 338 : 
The variable name "s", representing the PdfSTamper has to be more explicit. Indeed, even if it is in a block with temporary variables needed by a for loop, it is used at least three times outside the loop. 

3. Class names are nouns, in mixed case, with the first letter of each word in capitalized. 
OK

4. Interface names should be capitalized like classes.
NO INTERFACE

5. Method names should be verbs, with the first letter of each addition word capitalized. 
OK

6. Class variables, also called attributes, are mixed case, but might begin with an underscore (` ') followed by a lowercase first letter. All the remaining words in the variable name have their first letter capitalized.
OK

7. Constants are declared using all uppercase with words separated by an underscore.
Two constants are used in the code and are not declared in uppercase : 
Line 73 : public static final String module = PdfSurveyServices.class.getName();
It should be MODULE.
Line 74 : public static final String resource = "ContentUiLabels";
It should be RESOURCE.

5.2 Indention
8. Three or four spaces are used for indentation and done so consistently.
Four spaces are used for each identation except for the catch exceptions, the identation in these code blocks are of two spaces.

9. No tabs are used to indent.
OK

5.3 Braces
10. Consistent bracing style is used, either the preferred \Allman" style (first brace goes underneath the opening block) or the \Kernighan and Ritchie" style (first brace is on the same line of the instruction that opens the new block).
The style of bracing is consistent, using the "Kernighan and Ritchie" one.
11. All if, while, do-while, try-catch, and for statements that have only one statement to execute are surrounded by curly braces. 
All the if, for and try-catch statements are surrounded by curly braces.
There is only one while statement and it is not surrounded by curly braces but written on the same line :
Line 585 : while ((c = fis.read()) != -1) baos.write(c);
There is no do-while statement in the code. 

5.4 File Organization
12. Blank lines and optional comments are used to separate sections (beginning comments, package/import statements, class/interface declarations which include class variable/attributes declarations, constructors, and methods).
The blank lines are moreover used to separate the end of statements from new variable declarations or attributions (after the if, else, for, try-catch) (for instance lines 195-197 or 309-310).
Finally they are also used to manage blocks of similar code such as variable declarations or loops (for example lines 142-147 or 118-121).

13. Where practical, line length does not exceed 80 characters.
OK
14. When line length must exceed 80 characters, it does NOT exceed 120 characters.
When exceed 80 characters it is to declare a method, so it is better to be written on the same line (example line 79 for the buildSurveyFromPdf method).
But it also occurs in some other parts of the code :
Because of the Map, needed to create the "SurveyQuestionCategory", "buildSurveyResponseFromPdf", "buildPdfFromSurveyResponse" and "buildSurveyQuestionsAndAnswers" on lines 108-109, 227, 390 and 460
with the line lengths of 246, 124, 125 and 127 characters.
Because of the logWarning that has to be register for the debug lines 132, 148, 156, the line length are respectively of 161, 156, 189 characters.
Because the generic values "surveyQuestionAppl", "surveyResponse", "surveyResponseAnswer" and "surveyQuestion" of lines 191, 236, 242, 401, 269, 423, 467, 470, 495, 513 with the line lengths from 135 to 172 characters.
Because of the list of generic values "responses" lines 419, 467 and 508 with 143 characters.
Because of the return errors that exceed 150 characters per line several times (lines 210, 213, 216, 279, 282, 285).
  
5.5 Wrapping Lines
There are two expressions that are break on several lines in the code :   
Lines 258-261 : The generic value "surveyQuestionAndAppl" is defined on 4 lines. 
Lines 515-519 : The generic value "surveyQuestionAppl" is defined on 5 lines.
Both of them have lines breaking that occurs after comma and parenthesis (high-level break) and are well aligned according to the level of the previous line expression.

15. Line break occurs after a comma or an operator.
OK
16. Higher-level breaks are used.
OK
17. A new statement is aligned with the beginning of the expression at the same level as the previous line.
OK

5.6 Comments
18. Comments are used to adequately explain what the class, interface, methods, and blocks of code are doing.
There is not enough comments to describe the methods or the class. All of the ones before the methods are empty and the one before the class only give its name.
The useful comments are dispatched in the code, before some parts that need to be explicited. 
The comments are also used for the TODO, the functionalities that have to be added or changed in the future :
Line 129 : //TODO: handle these specially with the acroFields.getListOptionDisplay (and getListOptionExport?)
Line 159 : // TODO: need to find something better to put into these fields...

And for advise for the future :
Line 425 : 
// DEJ20060227 this isn't used, if needed in the future should get from SurveyQuestionAppl.externalFieldRef String fieldName = surveyQuestion.getString("description");

19. Commented out code contains a reason for being commented out and a date it can be removed from the source file if determined it is no longer needed.
The only commented out code line in the script is not commented or dated :
Line 256 : //AcroFields.Item item = fs.getFieldItem(fieldName);

5.7 Java Source Files
20. Each Java source file contains a single public class or interface.
Ok: public class PdfSurveyServices

21. The public class is the first class or interface in the file.
Ok

22. Check that the external program interfaces are implemented consistently with what is described in the javadoc.
Ok

23. Check that the javadoc is complete (i.e., it covers all classes and files part of the set of classes assigned to you).
All methods from the class are covered. There is a lack of comments.

5.8 Package and Import Statements

24. If any package statements are needed, they should be the first non-comment statements. Import statements follow.
Ok: org.apache.ofbiz.content.survey

5.9 Class and Interface Declarations
25. The class or interface declarations shall be in the following order:
(a) class/interface documentation comment;
Ok
(b) class or interface statement;
Ok
(c) class/interface implementation comment, if necessary;
Ok
(d) class (static) variables;
i. first public class variables;
Ok
ii. next protected class variables;
None
iii. next package level (no access modifier);
None
iv. last private class variables.
None
(e) instance variables;
i. first public instance variables;
None
ii. next protected instance variables;
None
iii. next package level (no access modifier);
None
iv. last private instance variables.
None
(f) constructors;
None
(g) methods.
Ok

26. Methods are grouped by functionality rather than by scope or accessibility.
Ok, it make sense: Build survey from pdf, Get/Set AcroField, build Pdf, build survey, Set AcroField from survey, GetInputByteBuffer

27. Check that the code is free of duplicates, long methods, big classes, breaking encapsulation, as well as if coupling and cohesion are adequate.
No duplicated methods
Longest method 144 lines
Class size: 600 lines 
Every methods and class variables are public

5.10 Initialization and Declarations
28. Check that variables and class members are of the correct type. Check that they have the right visibility (public/private/protected).
The class variables are both public with the correct type.
The class methods are all public and with the correct type according to what they return.

29. Check that variables are declared in the proper scope.
The class variables are defined at the beginning of the definition of the class.
And methods variables are declared at the beginning of each methods with the default visibility.

30. Check that constructors are called when a new object is desired.
Ok

31. Check that all object references are initialized before use.
Using default initialization most of the time.

32. Variables are initialized where they are declared, unless dependent upon a computation.
Ok

33. Declarations appear at the beginning of blocks (A block is any code surrounded by curly braces `f' and `g'). The exception is a variable can be declared in a for loop.
LINE 191 GenericValue surveyQuestionAppl not declarated at the beginning of a block
LINE 366 ByteBuffer outByteBuffer not declarated at the beginning of a block
LINE 444 ByteBuffer outByteBuffer not declarated at the beginning of a block

5.11 Method Calls
34. Check that parameters are presented in the correct order.
Ok

35. Check that the correct method is being called, or should it be a different method with a similar name.
Ok

36. Check that method returned values are used properly.
Ok

5.12 Arrays
37. Check that there are no one-by-one errors in array indexing (that is, all required array elements are correctly accessed through the index).
Only on array is filled: line 141, 5 value manually indexed from 0 to 4.

38. Check that all array (or other collection) indexes have been prevented from going out-of-bounds.
Ok, all collections referred trough loop are using foreach model or for loop and size property to define the bound.

39. Check that constructors are called when a new array item is desired.
Only one array declarated line 140, used to get value from another object, wihtout constructorsno operations performed on it

5.13 Object Comparison
40. Check that all objects (including Strings) are compared with equals and not with ==.
line 123, 125, 127, 262, 270, 578 comparison using ==

5.14 Output Format
41. Check that displayed output is free of spelling and grammatical errors.
42. Check that error messages are comprehensive and provide guidance as to how to correct the problem.
43. Check that the output is formatted correctly in terms of line stepping and spacing.


5.15 Computation, Comparisons and Assignments
44. Check that the implementation avoids \brutish programming": (see http://users.csc.calpoly.edu/~jdalbey/SWE/CodeSmells/bonehead.html).
45. Check order of computation/evaluation, operator precedence and parenthesizing.
46. Check the liberal use of parenthesis is used to avoid operator precedence problems.
47. Check that all denominators of a division are prevented from being zero.
48. Check that integer arithmetic, especially division, are used appropriately to avoid causing unexpected truncation/rounding.
49. Check that the comparison and Boolean operators are correct.
50. Check throw-catch expressions, and check that the error condition is actually legitimate.
51. Check that the code is free of any implicit type conversions.

5.16 Exceptions
52. Check that the relevant exceptions are caught.
53. Check that the appropriate action are taken for each catch block.


5.17 Flow of Control
54. In a switch statement, check that all cases are addressed by break or return.
55. Check that all switch statements have a default branch.
56. Check that all loops are correctly formed, with the appropriate initialization, increment and termination expressions.


5.18 Files
57. Check that all files are properly declared and opened.
58. Check that all files are closed properly, even in the case of an error.
59. Check that EOF conditions are detected and handled correctly.
60. Check that all file exceptions are caught and dealt with accordingly.



6. Any other problem you have highlighted: <list here all the parts of code that you think create or may create a bug and explain why.>