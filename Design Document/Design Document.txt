1.	Introduction

1.1.	Purpose
The Design Document provides a functional description of the PowerEnjoy's system. Its aim is to present the architectural design of the application and to explain the taken decisions for this choice.
This document is a technical description of the interaction between the software and the users and is intended to be a support for the developers.

1.2.	Scope (same as RASD)
The scope of the project PowerEnjoy, which is a service based on mobile application, is to manage, design, build, and implement a service aimed at facilitating public transportation.
The application provides to its target, the client, a way to research an electric car near a position, reserve it and pick it for a ride. At the end the application sends the ride's bill to the client.
The PowerEnjoy application needs the client to be registered in its database before he can reserve a car, for security and payment reasons (credential information, driver license, and identity card). 
When the client logs in, the mobile application allows him to reserve a car around an address or his GPS position. Then it provides him details about his reservation on the main page. 
The application also allows the client to cancel his reservation, unlock the reserved car when he is near it, and access his account details to modify it. 
After the ride the application locks the car and sends an email to the client with the bill of the ride. The mobile application can moreover give discounts and charges in function of the client’s ride such as sharing the car or plug it in power grid station.  
The PowerEnjoy application is built in order to ensure an easy and clear reservation service as well as an effective data collecting and saving. 
This refers the PowerEnjoy application simplifies the customer’s uses, optimises the time to reserve a car and adjusts the price of the ride according to the driver.

1.3.	Definitions, Acronyms, Abbreviations
RASD : Requirements Analysis and Specifications Document
DD : Design Document

1.4.	Reference documents
1.5.	Used Tools

1.6.	Document structure
In the following parts of the document are describing the different part of the application's design and the needed RASD requirements. 
Architectural design
This section introduced the high level architecture of the PowerEnjoy system, its main components and interfaces, its runtime behavior and its design patterns.
Algorithm design
In this second part, the most critical parts are presented.To this end, some explicit algorithms in pseudocode are provided for the implementation. 
User interface design
This section provides an overview of the user interfaces of the application by giving mockup.
Requirements traceability
In this part are describing the RASD requirements that cover every design elements defined in the Design Document.
Finally the hours of work repartition follows this section.

 
2.	Architectural design

2.1.	Overview [Rémi]
The PowerEnjoy system has a three tier architecture: a database server, an application server and a user interface. The user interface being composed of the mobile application only, a RESTful API will ensure all the communications between the application server and the client.
The main benefit of this kind of structural implementation is its flexibility as it becomes simple to have several database servers holding the data or it can easily integrates a cloud system.

2.2.	High level components and their interactions [Rémi]
The high level components are composed of different layers, the first one is the database component that holds all the data and provides an exhaustive way to trace all sensitive actions such as payment transactions. Then, the application server is responsible for all the logic of the system and is the only component to have access to the database. Thus it provides all the needed informations to the mobile app and the administration computer and the next layer. The latter allows the PowerEnjoy company to monitor the whole system at any time providing the location of all the cars and eventually their current state so that an employee can be informed if maintenance is needed for example. The mobile app communication with the server initiates when the driver opens the application and logs in, the RESTful API will ensures the exchange of data between those two components.

2.2.1.	 Subsystems Structure [Rémi]

2.3.	Component view [Noëlie]
2.4.	Deployment view [Noëlie]
2.5.	Runtime View [Noëlie]
2.6.	Component interfaces [Rémi]
2.7.	Selected architectural styles and patterns [vianney]
2.7.1.	Overall Architecture [vianney]
Our application will be divided into 3 tiers:
	1.Database ( DAL: Data Access Layer )
	2.Application Logic ( BLL: Business Logic Layer )
	3.Thin Client ( a simple and easy interface to BLL )
		
2.7.2.	Protocols [vianney]
Our tiers are connected through network and exchange data with the following
protocols.

PDO: PHP Data Objects used by the BLL to communicate with the DAL.

PDO is a common protocol used to communicate between a a DAL and BLL and 
fit well with our project. As a common protocol it will be easier to 
implement and keep updated (example, community, support etc...). 
And it also works with most of database system

An API with JSON used by clients ( mobile apps for user and hidden 
client in the car ) to interact with the BLL through http methods. 
API calls that need authentication are
required to authenticate via HTTP basic authentication for each request. 
Exchanged data will be secured using SSL.

As now ( v1 ), here are few methods that we will use:
	•api/v1/user/info [auth]
	–GET: get user info
	–POST/PUT: update/set user data
	•api/v1/user/request
	–POST: create a new request for car
	•api/v1/user/reservation
	–POST: create a new reservation

	•api/v1/car/ride
	–POST: create a new ride 
	•api/v1/car/park
	–POST: car properly parked


2.7.3.	Design patterns [vianney]
The MVC pattern will fit well with our three tier architecture.
As a common design pattern and known by most programmer, it will 
provide simplicity and efficiency: the component will be logically 
grouped and divided, improving task repartition and providing efficient work process.

The API is based on a REST design pattern as you can guess from the http methods.
As the http and JSON protocol are well known, we can use the many, already avaialbles, tools to work with it
and there is no need to redefine such protocols (http) like in a Service Oriented Architecture.
Moreover, a REST architecute will improve the creation of many services like security, 
monitoring, service quality and many other non functional part of web services.


2.8.	Other design decisions (if some)

 
3.	Algorithm design
Code of critical part 
3.1.	Part 1
3.2.	Part 2
 
4.	User interface design
4.1.	Mockups (RASD)
4.2.	UX diagrams (user exp)
4.3.	BCE diagrams (business controller entity)

 
5.	Requirements traceability
5.1.	Registration
5.2.	Login
5.3.	Reservation
5.4.	Cancel
5.5.	Unlock
5.6.	Ride
 
6.	Hours of work
